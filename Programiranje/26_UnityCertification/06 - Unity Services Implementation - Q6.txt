
A Programmer is implementing In-App Purchasing for a 3D Mobile Adventure game that is only targeted at the Google Play store. The Programmer wants to offer a consumable item named 100 gems to be used as an in-game currency. 

The Programmer creates a private const string for this item named productHundredGems and assigned it to consumable. 

How should the Programmer implement the initialization of the store?


Answers: 
1. private static IStoreController storeController; private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; private static string googlePlaySubscription = "com.unity3d.subscription.original"; void Start() { if (storeController == null) { InitializePurchasing(); } } public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.Subscription, new IDs() { { googlePlaySubscription, GooglePlay.Name } }); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { return storeController != null && extensionProvider != null; } 
2. private static IStoreController storeController; private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; void Start() { if (storeController == null) { InitializePurchasing(); } } public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.Consumable); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { return storeController != null && extensionProvider != null; } 
3. private static IStoreController storeController; private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; void Start() { if (storeController == null) { InitializePurchasing(); } } public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.NonConsumable); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { return storeController != null && extensionProvider != null; } 
4. private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; private static string googlePlaySubscription = "com.unity3d.subscription.original"; public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.Consumable); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { } 



Correct Answers: 
2. private static IStoreController storeController; private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; void Start() { if (storeController == null) { InitializePurchasing(); } } public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.Consumable); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { return storeController != null && extensionProvider != null; } 



Explanation: 
Explanation The Programmer should implement the initialization of the store with the following: private static IStoreController storeController; private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; void Start() { if (storeController == null) { InitializePurchasing(); } } public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.Consumable); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { return storeController != null && extensionProvider != null; } This will properly configure and initialize Unity Purchasing so that the consumable item can be purchased. The Programmer should not implement the initialization of the store with the following: private static IStoreController storeController; private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; void Start() { if (storeController == null) { InitializePurchasing(); } } public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.NonConsumable); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { return storeController != null && extensionProvider != null; } This will incorrectly configure the purchase of the gems as a NonConsumable. The Programmer should not implement the initialization of the store with the following: private static IStoreController storeController; private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; private static string googlePlaySubscription = "com.unity3d.subscription.original"; void Start() { if (storeController == null) { InitializePurchasing(); } } public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.Subscription, new IDs() { { googlePlaySubscription, GooglePlay.Name } }); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { return storeController != null && extensionProvider != null; } This will incorrectly configure the purchase of the gems as a Subscription. The Programmer should not implement the initialization of the store with the following: private static IExtensionProvider extensionProvider; public const string productHundredGems = "consumable"; public void InitializePurchasing() { if (!IsInitialized()) { BuildStore(); } } private void BuildStore() { var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance()); builder.AddProduct(productHundredGems, ProductType.Consumable); UnityPurchasing.Initialize(this, builder); } private bool IsInitialized() { } This fails to initialize the interface to the Unity Purchasing system. References Implementing a Store Setting up Unity IAP UnityPurchasing.Initialize