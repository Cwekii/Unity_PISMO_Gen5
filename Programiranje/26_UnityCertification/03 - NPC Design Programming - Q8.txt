
A Programmer is making a 3D Action/Adventure game. The Programmer is working on a level that is full of areas the player can flood and un-flood by a series of levers to prevent being followed by the NPC enemy characters.

The Programmer needs to implement a NavMesh solution that can easily scale for additional areas. The water is generated and controlled by a shader, so there is no actual object for the NPCs to interact with. 

Which three steps should the Programmer use to accomplish this? (Choose three.)


Answers: 
1. Programmatically assign the area a custom NavMesh when the area is flooded. 
2. Create a custom NavMesh Area with a very high cost that will cause the NPCs to ignore the area. 
3. Programmatically change the cost of the custom NavMesh areas to something very high when the area is flooding to preventing the NPCs from using the area. 
4. Assign the areas that floods a custom NavMesh area. 
5. Have the water carve the NavMesh. 
6. Programmatically change the cost of the custom NavMesh areas back to the normal cost when the area is not flooded to allow the NPC enemies to use the area. 
7. Set the destination of the NPCs back to a non- flooded area. 



Correct Answers: 
3. Programmatically change the cost of the custom NavMesh areas to something very high when the area is flooding to preventing the NPCs from using the area. 
4. Assign the areas that floods a custom NavMesh area. 
6. Programmatically change the cost of the custom NavMesh areas back to the normal cost when the area is not flooded to allow the NPC enemies to use the area. 



Explanation: 
Explanation The Programmer should assign the areas that can flood a custom NavMesh area so that the cost of these areas can be changed easily to prevent the NPCs from using them. The Programmer should also programmatically change the cost of the custom NavMesh areas to something very high when the area is flooding to prevent the NPC enemies from using the area. The Programmer should also programmatically change the cost of the custom NavMesh areas back to the normal cost when the area is not flooded to allow the NPC enemies to use the area. The Programmer should not set the NPCs destination back to a non-flooded area. Enemy NPCs will automatically move towards the nearest traversable area if the area they are currently walking in has too high of a cost. Determining the ideal location to set a new destination would require a lot of additional processing compared with just adjusting the cost of the floodable areas. The Programmer should not create a custom NavMesh Area with a very high cost that will cause the NPC enemies to ignore the area. Creating a separate custom NavMesh Area with a very high cost would prevent NPCs from using it even when they should be chasing the player. The Programmer should not programmatically assign the area a custom NavMesh when the area is flooded. The Programmer should programmatically change the cost of the custom NavMesh area at runtime to a value high enough that the NPCs will avoid the area while it is flooded. The Programmer should not have the water carve the NavMesh. The water is generated by a shader, which cannot carve a custom NavMesh. The Programmer should use custom NavMesh areas that have their cost adjusted for NPCs to use or not use at runtime. References Navigation and Pathfinding Navigation System in Unity Nav Mesh Obstacle Water in Unity Writing Shaders